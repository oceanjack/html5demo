<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>迷宫</title>
    <script type="text/javascript" src="Oak3D_v_0_5.js"></script>
    <script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec2 vTextureCoord;
    varying vec3 vLightWeighting;
    varying vec3 vTransformedNormal;
    varying vec4 vPosition;

    uniform vec3 uAmbientColor;
    uniform vec3 uPointLightingLocation;
    uniform vec3 uPointLightingColor;

    uniform sampler2D uSampler;

    void main(void) {
        vec3 lightDirection = normalize(uPointLightingLocation - vPosition.xyz);
        float directionalLightWeighting = max(dot(normalize(vTransformedNormal), lightDirection), 0.0);
        vec3 lightWeighting = uAmbientColor + uPointLightingColor * directionalLightWeighting;
        
        vec4 textureColor= texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = vec4(textureColor.rgb * lightWeighting, textureColor.a);
    }
    </script>
    <script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec3 aVertexNormal;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat4 uNMatrix;
    
    uniform vec3 uAmbientColor;
    uniform bool uUseLighting;

    varying vec2 vTextureCoord;
    varying vec3 vLightWeighting;
    varying vec3 vTransformedNormal;
    varying vec4 vPosition;

    void main(void) {
        vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);
        gl_Position = uPMatrix * vPosition;
        vTextureCoord = aTextureCoord;
        vLightWeighting = uAmbientColor;
        vTransformedNormal = (uNMatrix * vec4(aVertexNormal, 1.0)).xyz;
    }
    </script>
    <script type="text/javascript">
        var gl;
        var music;
        var walkBell;
        //初始化
        function init()
        {
            music = document.createElement("audio");
            var musicSrc = document.createElement("source");
            var musicNum = Math.floor(Math.random() * 3 + 1);
            musicSrc.setAttribute("src", "0" + musicNum + ".ogg");
            musicSrc.setAttribute("type", "audio/ogg");
            musicSrc.setAttribute("loop", "loop");
            music.appendChild(musicSrc);
            music.play();

            walkBell = document.createElement("audio");
            musicSrc = document.createElement("source");
            musicSrc.setAttribute("src", "bell.ogg");
            musicSrc.setAttribute("type", "audio/ogg");
            musicSrc.setAttribute("loop", "loop");
            walkBell.appendChild(musicSrc);
        }
        //初始化GL
        function initGL(canvas) {
            try {
                gl = canvas.getContext("experimental-webgl");
                canvas.width = document.body.clientWidth;
                canvas.height = document.body.clientHeight;
                gl.viewportWidth = canvas.width;
                gl.viewportHeight = canvas.height;
            } catch (e) {
            }
            if (!gl) {
                alert("Could not initialise WebGL, sorry :-(");
            }
        }
        window.onresize = function() {
            initGL(document.getElementById("cs-canvas")); 
        }
        //获得着色器
        function getShader(gl, id) {
            var shaderScript = document.getElementById(id);
            if (!shaderScript) {
                return null;
            }

            var str = "";
            var k = shaderScript.firstChild;
            while (k) {
                if (k.nodeType == 3) {
                    str += k.textContent;
                }
                k = k.nextSibling;
            }

            var shader;
            if (shaderScript.type == "x-shader/x-fragment") {
                shader = gl.createShader(gl.FRAGMENT_SHADER);
            } else if (shaderScript.type == "x-shader/x-vertex") {
                shader = gl.createShader(gl.VERTEX_SHADER);
            } else {
                return null;
            }

            gl.shaderSource(shader, str);
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                alert(gl.getShaderInfoLog(shader));
                return null;
            }

            return shader;
        }

        var shaderProgram;
        //初始化着色器
        function initShaders() {
            var fragmentShader = getShader(gl, "shader-fs");
            var vertexShader = getShader(gl, "shader-vs");

            shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertexShader);
            gl.attachShader(shaderProgram, fragmentShader);
            gl.linkProgram(shaderProgram);

            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
                alert("Could not initialise shaders");
            }

            gl.useProgram(shaderProgram);

            shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
            gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

            shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
            gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

            shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
            gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

            shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
            shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
            shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");
            shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");

            shaderProgram.ambientColorUniform = gl.getUniformLocation(shaderProgram, "uAmbientColor");
            shaderProgram.pointLightingLocationUniform = gl.getUniformLocation(shaderProgram, "uPointLightingLocation");
            shaderProgram.pointLightingColorUniform = gl.getUniformLocation(shaderProgram, "uPointLightingColor");
        }
        //处理载入纹理
        function handleLoadedTexture(texture) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

            gl.bindTexture(gl.TEXTURE_2D, null);
        }

        var mudTexture;
        //初始化纹理
        function initTexture() {
            mudTexture = gl.createTexture();
            mudTexture.image = new Image();
            mudTexture.image.onload = function () {
                handleLoadedTexture(mudTexture)
            }

            mudTexture.image.src = "glass.gif";
        }

        var mvMatrix;
        var mvMatrixStack = [];
        var pMatrix;
        //压栈
        function mvPushMatrix() {
            var copy = new okMat4();
            mvMatrix.clone(copy);
            mvMatrixStack.push(copy);
        }
        //出栈
        function mvPopMatrix() {
            if (mvMatrixStack.length == 0) {
                throw "Invalid popMatrix!";
            }
            mvMatrix = mvMatrixStack.pop();
        }
        //推送显卡
        function setMatrixUniforms() {
            gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix.toArray());
            gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix.toArray());

            var normalMatrix = mvMatrix.inverse().transpose();
            gl.uniformMatrix4fv(shaderProgram.nMatrixUniform, false, normalMatrix.toArray());
        }

        var currentlyPressedKeys = {};
        //记录键盘输入
        function handleKeyDown(event) {
            currentlyPressedKeys[event.keyCode] = true;
        }
        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        var pitch = 0;
        var pitchRate = 0;

        var yaw = 0;
        var yawRate = 0;

        var xPos = 0;
        var yPos = 0.4;
        var zPos = 0;

        var speed = 0;
        //处理键盘输入
        function handleKeys() {
            if (currentlyPressedKeys[33]) {
                // Page Up
                pitchRate = 0.1;
            } else if (currentlyPressedKeys[34]) {
                // Page Down
                pitchRate = -0.1;
            } else {
                pitchRate = 0;
                walkBell.play();
            }

            if (currentlyPressedKeys[37] || currentlyPressedKeys[65]) {
                // Left cursor key or A
                yawRate = 0.1;
            } else if (currentlyPressedKeys[39] || currentlyPressedKeys[68]) {
                // Right cursor key or D
                yawRate = -0.1;
            } else {
                yawRate = 0;
            }

            if (currentlyPressedKeys[38] || currentlyPressedKeys[87]) {
                // Up cursor key or W
                speed = 0.003;
            } else if (currentlyPressedKeys[40] || currentlyPressedKeys[83]) {
                // Down cursor key
                speed = -0.003;
            } else {
                speed = 0;
            }

        }

        var worldVertexPositionBuffer = null;
        var worldVertexTextureCoordBuffer = null;
        var worldVertexNormalBuffer = null;
        var mapMatrix = [];
        //处理光照
        function handleLight()
        {
            //环境光
            gl.uniform3f(shaderProgram.ambientColorUniform, 0.01, 0.01, 0.01);
            
            gl.uniform3f(shaderProgram.pointLightingLocationUniform, 0.0, 0.7, 0.0);
            gl.uniform3f(shaderProgram.pointLightingColorUniform, 0.9, 0.9, 0.9);
        }
        //处理world
        function handleLoadedWorld(data) {
            var lines = data.split("\n");
            var vertexCount = 0;
            var vertexPositions = [];
            var vertexTextureCoords = [];
            var tempVals = null;
            for (var i in lines) {
                var vals = lines[i].replace(/^\s+/, "").split(/\s+/);
                if (vals.length == 5 && vals[0] != "//") {
                    // It is a line describing a vertex; get X, Y and Z first
                    vertexPositions.push(parseFloat(vals[0]));
                    vertexPositions.push(parseFloat(vals[1]));
                    vertexPositions.push(parseFloat(vals[2]));

                    // And then the texture coords
                    vertexTextureCoords.push(parseFloat(vals[3]));
                    vertexTextureCoords.push(parseFloat(vals[4]));

                    vertexCount += 1;
                    
                    if (vertexCount > 1 && tempVals != null && (vertexCount - 1) % 6 != 0) {
                        var newTempX = parseInt(vals[0]);
                        var newTempZ = parseInt(vals[2]);
                        var oldTempX = parseInt(tempVals[0]);
                        var oldTempZ = parseInt(tempVals[2]);
                        mapMatrix.push(newTempX);
                        mapMatrix.push(newTempZ);
                        mapMatrix.push(oldTempX);
                        mapMatrix.push(oldTempZ);
                    }
                    tempVals = vals;
                }
            }

            worldVertexPositionBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexPositionBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositions), gl.STATIC_DRAW);
            worldVertexPositionBuffer.itemSize = 3;
            worldVertexPositionBuffer.numItems = vertexCount;

            worldVertexTextureCoordBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexTextureCoordBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexTextureCoords), gl.STATIC_DRAW);
            worldVertexTextureCoordBuffer.itemSize = 2;
            worldVertexTextureCoordBuffer.numItems = vertexCount;

            worldVertexNormalBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexNormalBuffer);
            var verexNormals = [];
            for (var i = 0; i < vertexCount; ++i) {
                verexNormals.push(0.0);
                verexNormals.push(1.0);
                verexNormals.push(0.0);
            }

            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verexNormals), gl.STATIC_DRAW);
            worldVertexNormalBuffer.itemSize = 3;
            worldVertexNormalBuffer.numItems = vertexCount;

            document.getElementById("loadingtext").textContent = "";
        }
        //加载world
        function loadWorld() {
            var request = new XMLHttpRequest();
            request.open("GET", "world.txt");
            request.onreadystatechange = function () {
                if (request.readyState == 4) {
                    handleLoadedWorld(request.responseText);
                }
            }
            request.send();
        }
        //渲染
        function drawScene() {
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            if (worldVertexTextureCoordBuffer == null || worldVertexPositionBuffer == null) {
                return;
            }

            pMatrix = okMat4Proj(35, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0);

            mvMatrix = new okMat4();
            mvMatrix.rotX(OAK.SPACE_LOCAL, -pitch, true);
            mvMatrix.rotY(OAK.SPACE_LOCAL, -yaw, true);
            mvMatrix.translate(OAK.SPACE_LOCAL, -xPos, -yPos, -zPos, true);

            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, mudTexture);
            gl.uniform1i(shaderProgram.samplerUniform, 0);

            gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexTextureCoordBuffer);
            gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, worldVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

            gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexNormalBuffer);
            gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, worldVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);

            gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexPositionBuffer);
            gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, worldVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

            handleLight();

            setMatrixUniforms();
            gl.drawArrays(gl.TRIANGLES, 0, worldVertexPositionBuffer.numItems);
        }
        //角度转弧度
        function degToRad(degrees) {
            return degrees * Math.PI / 180;
        }

        //穿越检测(根据地图特性降维处理线段即可)
        var isxWall = false;
        var isyWall = false;
        function canBeCross(ox, oy, nx, ny)
        {
            var mapLength = mapMatrix.length;
            for (var i = 0 ; i < mapLength; i += 4)
            {
                var x0 = mapMatrix[i];
                var y0 = mapMatrix[i + 1];
                var x1 = mapMatrix[i + 2];
                var y1 = mapMatrix[i + 3];
                if (x0 == x1 && y0 == y1)
                {
                    if ((nx - x0) * (nx - x0) + (ny - y0) * (ny - y0) < 0.01) {
                        isxWall = true;
                        isyWall = true;
                    }
                }
                if (x0 == x1)
                {
                    if (y0 < y1 && y0 - 0.01 <= oy && oy <= y1 + 0.01 && y0 - 0.01 <= ny && ny <= y1 + 0.01)
                    {
                        y0 -= 0.1;
                        y1 += 0.1;
                        var ciAO = nx - x0;
                        var niMa = ox - x0;
                        if ((ciAO > 0 && niMa < 0) || (ciAO < 0 && niMa > 0) || Math.abs(ciAO) < 0.12)
                            isxWall = true;
                    }
                    if (y1 < y0 && y1 - 0.01 <= oy && oy <= y0 + 0.01 && y1 - 0.01 <= ny && ny <= y0 + 0.01)
                    {
                        y0 += 0.1;
                        y1 -= 0.1;
                        var ciAO = nx - x0;
                        var niMa = ox - x0;
                        if ((ciAO > 0 && niMa < 0) || (ciAO < 0 && niMa > 0) || Math.abs(ciAO) < 0.12)
                            isxWall = true;
                    }
                }
                if (y0 == y1)
                {
                    if (x0 < x1 && x0 - 0.01 <= ox && ox <= x1 + 0.01 && x0 - 0.01 <= nx && nx <= x1 + 0.01)
                    {
                        x0 -= 0.1;
                        x1 += 0.1;
                        var ciAO = ny - y0;
                        var niMa = oy - y0;
                        if ((ciAO > 0 && niMa < 0) || (ciAO < 0 && niMa > 0) || Math.abs(ciAO) < 0.12)
                            isyWall = true;
                    }
                    if (x1 < x0 && x1 - 0.01 <= ox && ox <= x0 + 0.01 && x1 - 0.01 <= nx && nx <= x0 + 0.01)
                    {
                        x0 += 0.1;
                        x1 -= 0.1;
                        var ciAO = ny - y0;
                        var niMa = oy - y0;
                        if ((ciAO > 0 && niMa < 0) || (ciAO < 0 && niMa > 0) || Math.abs(ciAO) < 0.12)
                            isyWall = true;
                    }
                }
            }
            return true;
        }

        var lastTime = 0;
        // Used to make us "jog" up and down as we move forward.
        var joggingAngle = 0;
        //时钟变化
        function animate() {
            var timeNow = new Date().getTime();
            if (lastTime != 0) {
                var elapsed = timeNow - lastTime;

                if (speed != 0) {
                    var tempxPos = xPos - Math.sin(degToRad(yaw)) * speed * elapsed;
                    var tempzPos = zPos - Math.cos(degToRad(yaw)) * speed * elapsed;
                    isxWall = false;
                    isyWall = false;
                    canBeCross(xPos, zPos, tempxPos, tempzPos);
                    if(isxWall == false)
                        xPos = tempxPos;
                    if(isyWall == false)
                        zPos = tempzPos;

                    joggingAngle += elapsed * 0.6; // 0.6 "fiddle factor" - makes it feel more realistic :-)
                    yPos = Math.sin(degToRad(joggingAngle)) / 20 + 0.4
                }

                yaw += yawRate * elapsed;
                if (-30 < pitch + pitchRate * elapsed && pitch + pitchRate * elapsed < 70)
                    pitch += pitchRate * elapsed;


            }
            lastTime = timeNow;
        }
        //循环处理
        function tick() {
            okRequestAnimationFrame(tick);
            handleKeys();
            drawScene();
            animate();
        }
        //相当于Main函数
        function webGLStart() {
            var canvas = document.getElementById("cs-canvas");
            init();
            initGL(canvas);
            initShaders();
            initTexture();
            loadWorld();

            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.enable(gl.DEPTH_TEST);

            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            tick();
        }
    </script>
    <style type="text/css">
        #loadingtext
        {
            position: absolute;
            top: 250px;
            left: 150px;
            font-size: 2em;
            color: white;
        }
    </style>
</head>
<body style="cursor:none"onload="webGLStart();">
    <canvas id="cs-canvas" style="border: none;" width="1200" height="700"></canvas>
    <div id="loadingtext">Loading world...</div>
</body>
</html>
